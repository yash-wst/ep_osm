
-module(dig_ep_osm_exam_ip_report).
-compile(export_all).
-include("records.hrl").
-include_lib("nitrogen_core/include/wf.hrl").


%------------------------------------------------------------------------------
% main
%------------------------------------------------------------------------------

main() ->
	ita:auth(?MODULE, ?AKIT(#template {file="lib/itx/priv/static/templates/html/entered_nomenu.html"})).

title() ->
	?LN("IP Report").

heading() ->
	title().


%------------------------------------------------------------------------------
% records
%------------------------------------------------------------------------------



%------------------------------------------------------------------------------
% access
%------------------------------------------------------------------------------
access(_, ?APPOSM_ADMIN) -> true;
access(_, _) -> false.



%------------------------------------------------------------------------------
% function - get
%------------------------------------------------------------------------------

get() ->
	#dig {
		module=?MODULE,
		filters=[
			itf:build(itf:hidden(osm_exam_fk), wf:q(id))
		]
	}.


%------------------------------------------------------------------------------
% function - title
%------------------------------------------------------------------------------
digtitle() ->
	?LN("IP Report").



%------------------------------------------------------------------------------
% function - init
%------------------------------------------------------------------------------
init() ->
	ok.


%------------------------------------------------------------------------------
% function - fetch
%------------------------------------------------------------------------------


%..............................................................................
%
% Fs
%
%..............................................................................
fetch(D, _From, _Size, [
	#field {id=osm_exam_fk, uivalue=TestId}
]) ->

	%
	% init
	%
	{ok, TDoc} = ep_osm_exam_api:get(TestId),


	%
	% get stats
	%
	TestId = itf:idval(TDoc),
	Stats = ep_osm_exam_stats:getstats_ip_state_date_evaluator(
		TestId, undefined, undefined, 2
	),
	StatsDict = dict:from_list(Stats),
	IpList = ips_from_stats(Stats),


	%
	% get cells
	%
	Results = lists:map(fun(Ip) ->
		[
			#dcell {val=Ip}
		] ++lists:map(fun(State) ->
			case dict:find([Ip, State], StatsDict) of
				{ok, Count} ->
					#dcell {val=Count};
				_ ->
					#dcell {val=0}
			end
		end, states())
	end, IpList),


	%
	% headers
	%
	Header = [
		#dcell {type=header, val="IP"},
		#dcell {type=header, val="EC"},
		#dcell {type=header, val="MC"},
		#dcell {type=header, val="RC"},
		#dcell {type=header, val="MRC"}
	],



	%
	% return
	%
	{D#dig {}, [Header | Results]};




%
% default case
%
fetch(D, _From, _Size, _) ->
	{D, []}.




%------------------------------------------------------------------------------
% function - exports
%------------------------------------------------------------------------------
exports() -> [
].



%------------------------------------------------------------------------------
% layouts
%------------------------------------------------------------------------------
layout() ->
	dig:dig(?MODULE:get()).



%------------------------------------------------------------------------------
% events
%------------------------------------------------------------------------------
event({itx, E}) ->
	ite:event(E).



%------------------------------------------------------------------------------
% handler
%------------------------------------------------------------------------------



%------------------------------------------------------------------------------
% misc
%------------------------------------------------------------------------------

states() -> [
	"ec", "mc", "rc", "mrc"
].


ips_from_stats(Stats) ->
	Ips = lists:map(fun({[Ip | _], _Count}) ->
		Ip
	end, Stats),
	helper:unique(Ips).

%------------------------------------------------------------------------------
% end
%------------------------------------------------------------------------------
